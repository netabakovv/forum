Ты самый опытный фронтэндер на реакте. Твоя задача объяснить мне код и сказать что можно исправить, а что добавить. 
Требования и архитектура:

Микросервисная архитектура:

auth-service: отвечает за регистрацию, логин, JWT/Refresh токены.

forum-service: логика форума: темы, посты, комментарии, чат.

GRPC используется для связи между микросервисами.

База данных: PostgreSQL, без ORM, только database/sql или pgx.

Миграции через golang-migrate. Создай минимум 3 миграции (пользователи, темы, сообщения).

Токены:

access_token живёт 10–15 минут.

refresh_token живёт 30–45 дней и хранится в базе.

Механизм обновления токена: если refresh токен был использован — предыдущий становится невалидным (аналог защиты от кражи токена).

Чат:

Общий для всех тем, доступен на главной странице.

Чтение доступно всем, написание — только авторизованным.

Работает через WebSocket.

Старые сообщения (по TTL) автоматически удаляются.

Usecases / Clean architecture:

Вся бизнес-логика в usecase слоях.

Валидация — в entity.

Контроллеры и delivery-слой максимально тонкие.

Entity публичные, независимые от инфраструктуры.

Тестирование:

Микросервисы покрыты юнит-тестами на 80%.

Используются моки для юнит-тестов.

Интеграционные тесты проверяют работу с БД и взаимодействие между сервисами.

Логирование: используется стандартный log или продвинутое решение (zap, zerolog).

Документация: генерируется автоматически с помощью swaggo/swag.

Функциональность форума:

Главная страница: список тем, форма логина/регистрации, общий чат.

Каждая тема = пост с заголовком и описанием, ответы идут вложенно.

Админ может создавать темы и управлять ими.

Без подкатегорий.

Frontend: реализуется отдельно, но заложи API для него (REST или GRPC-Gateway).


Что уже есть:

import { useState, useEffect, useRef } from 'react';
import { BrowserRouter as Router, Routes, Route, Link, Navigate, useNavigate, useParams } from 'react-router-dom';
import { Bell, Menu, User, LogOut, MessageSquare, Edit, Trash2, Shield, Send } from 'lucide-react';

// Сервис для работы с API
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';

// Сервис для работы с аутентификацией
const AuthService = {
  login: async (username, password) => {
    try {
      const response = await fetch(`${API_URL}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password }),
      });
      
      if (!response.ok) throw new Error('Ошибка авторизации');
      
      const data = await response.json();
      localStorage.setItem('accessToken', data.accessToken);
      localStorage.setItem('refreshToken', data.refreshToken);
      localStorage.setItem('user', JSON.stringify(data.user));
      return data.user;
    } catch (error) {
      console.error('Ошибка входа:', error);
      throw error;
    }
  },

  register: async (username, email, password) => {
    try {
      const response = await fetch(`${API_URL}/auth/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, email, password }),
      });
      
      if (!response.ok) throw new Error('Ошибка регистрации');
      
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Ошибка регистрации:', error);
      throw error;
    }
  },

  logout: () => {
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('user');
  },

  getCurrentUser: () => {
    const userStr = localStorage.getItem('user');
    if (!userStr) return null;
    return JSON.parse(userStr);
  },

  // Функция обновления токена
  refreshToken: async () => {
    try {
      const refreshToken = localStorage.getItem('refreshToken');
      if (!refreshToken) throw new Error('Refresh token not found');

      const response = await fetch(`${API_URL}/auth/refresh`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ refreshToken }),
      });

      if (!response.ok) {
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
        localStorage.removeItem('user');
        throw new Error('Invalid refresh token');
      }

      const data = await response.json();
      localStorage.setItem('accessToken', data.accessToken);
      localStorage.setItem('refreshToken', data.refreshToken);
      return data.accessToken;
    } catch (error) {
      console.error('Error refreshing token:', error);
      throw error;
    }
  },

  // Оборачиваем запросы для автоматического обновления токена
  authFetch: async (url, options = {}) => {
    const accessToken = localStorage.getItem('accessToken');
    
    const headers = {
      ...options.headers,
      'Authorization': `Bearer ${accessToken}`
    };
    
    try {
      let response = await fetch(url, { ...options, headers });
      
      // Если токен истек, пробуем обновить
      if (response.status === 401) {
        const newToken = await AuthService.refreshToken();
        headers.Authorization = `Bearer ${newToken}`;
        response = await fetch(url, { ...options, headers });
      }
      
      if (!response.ok) throw new Error(`Ошибка API: ${response.status}`);
      
      return response;
    } catch (error) {
      console.error('Ошибка запроса:', error);
      throw error;
    }
  }
};

// Сервис для работы с форумом
const ForumService = {
  getTopics: async () => {
    try {
      const response = await fetch(`${API_URL}/forum/topics`);
      if (!response.ok) throw new Error('Ошибка получения тем');
      return await response.json();
    } catch (error) {
      console.error('Ошибка получения тем:', error);
      throw error;
    }
  },

  getTopic: async (id) => {
    try {
      const response = await fetch(`${API_URL}/forum/topics/${id}`);
      if (!response.ok) throw new Error('Ошибка получения темы');
      return await response.json();
    } catch (error) {
      console.error('Ошибка получения темы:', error);
      throw error;
    }
  },

  createTopic: async (title, content) => {
    try {
      const response = await AuthService.authFetch(`${API_URL}/forum/topics`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, content }),
      });
      return await response.json();
    } catch (error) {
      console.error('Ошибка создания темы:', error);
      throw error;
    }
  },

  createReply: async (topicId, content) => {
    try {
      const response = await AuthService.authFetch(`${API_URL}/forum/topics/${topicId}/replies`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ content }),
      });
      return await response.json();
    } catch (error) {
      console.error('Ошибка создания ответа:', error);
      throw error;
    }
  },

  deleteTopic: async (id) => {
    try {
      await AuthService.authFetch(`${API_URL}/forum/topics/${id}`, {
        method: 'DELETE',
      });
      return true;
    } catch (error) {
      console.error('Ошибка удаления темы:', error);
      throw error;
    }
  },

  deleteReply: async (topicId, replyId) => {
    try {
      await AuthService.authFetch(`${API_URL}/forum/topics/${topicId}/replies/${replyId}`, {
        method: 'DELETE',
      });
      return true;
    } catch (error) {
      console.error('Ошибка удаления ответа:', error);
      throw error;
    }
  }
};

// Контекст для управления состоянием аутентификации
const AuthContext = React.createContext(null);

const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(AuthService.getCurrentUser());
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Проверка авторизации при загрузке
    const user = AuthService.getCurrentUser();
    setCurrentUser(user);
    setLoading(false);
  }, []);

  const login = async (username, password) => {
    const user = await AuthService.login(username, password);
    setCurrentUser(user);
    return user;
  };

  const logout = () => {
    AuthService.logout();
    setCurrentUser(null);
  };

  const register = async (username, email, password) => {
    return await AuthService.register(username, email, password);
  };

  return (
    <AuthContext.Provider
      value={{ currentUser, loading, login, logout, register }}
    >
      {children}
    </AuthContext.Provider>
  );
};

// WebSocket сервис для чата
const ChatService = {
  connect: (onMessage) => {
    const socket = new WebSocket(`ws://${API_URL.replace(/^http(s?):\/\//, '')}/ws/chat`);
    
    socket.onopen = () => {
      console.log('WebSocket соединение установлено');
      
      // Отправляем токен для авторизации в WebSocket
      const token = localStorage.getItem('accessToken');
      if (token) {
        socket.send(JSON.stringify({ type: 'auth', token }));
      }
    };
    
    socket.onmessage = (event) => {
      const message = JSON.parse(event.data);
      onMessage(message);
    };
    
    socket.onclose = () => {
      console.log('WebSocket соединение закрыто');
    };
    
    return socket;
  },
  
  sendMessage: (socket, message) => {
    if (socket && socket.readyState === WebSocket.OPEN) {
      socket.send(JSON.stringify({ 
        type: 'message', 
        content: message 
      }));
    }
  }
};

// Компонент хедера
const Header = () => {
  const { currentUser, logout } = React.useContext(AuthContext);
  const [menuOpen, setMenuOpen] = useState(false);
  
  return (
    <header className="bg-blue-600 text-white shadow-md">
      <div className="container mx-auto px-4 py-3 flex justify-between items-center">
        <div className="flex items-center">
          <Link to="/" className="text-xl font-bold">ФорумGo</Link>
        </div>
        
        <div className="relative">
          {currentUser ? (
            <>
              <button 
                onClick={() => setMenuOpen(!menuOpen)}
                className="flex items-center space-x-2 focus:outline-none"
              >
                <span>{currentUser.username}</span>
                <User className="h-5 w-5" />
              </button>
              
              {menuOpen && (
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-10">
                  <Link 
                    to="/profile" 
                    className="block px-4 py-2 text-gray-800 hover:bg-gray-100"
                    onClick={() => setMenuOpen(false)}
                  >
                    Профиль
                  </Link>
                  {currentUser.isAdmin && (
                    <Link 
                      to="/admin" 
                      className="block px-4 py-2 text-gray-800 hover:bg-gray-100"
                      onClick={() => setMenuOpen(false)}
                    >
                      Админ панель
                    </Link>
                  )}
                  <button 
                    onClick={() => {
                      logout();
                      setMenuOpen(false);
                    }}
                    className="block w-full text-left px-4 py-2 text-gray-800 hover:bg-gray-100"
                  >
                    Выйти
                  </button>
                </div>
              )}
            </>
          ) : (
            <div className="flex space-x-4">
              <Link to="/login" className="hover:underline">Вход</Link>
              <Link to="/register" className="hover:underline">Регистрация</Link>
            </div>
          )}
        </div>
      </div>
    </header>
  );
};

// Компонент для отображения главной страницы
const HomePage = () => {
  const [topics, setTopics] = useState([]);
  const [loading, setLoading] = useState(true);
  const { currentUser } = React.useContext(AuthContext);
  
  useEffect(() => {
    const fetchTopics = async () => {
      try {
        const data = await ForumService.getTopics();
        setTopics(data);
      } catch (error) {
        console.error('Ошибка загрузки тем:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchTopics();
  }, []);
  
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-2xl font-bold">Темы форума</h1>
        {currentUser?.isAdmin && (
          <Link to="/create-topic" className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
            Создать тему
          </Link>
        )}
      </div>
      
      {loading ? (
        <div className="text-center py-8">Загрузка...</div>
      ) : topics.length > 0 ? (
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {topics.map((topic) => (
            <div key={topic.id} className="border-b last:border-b-0">
              <Link 
                to={`/topics/${topic.id}`}
                className="block p-4 hover:bg-gray-50"
              >
                <div className="flex justify-between">
                  <h2 className="text-lg font-semibold text-blue-800">{topic.title}</h2>
                  <div className="text-gray-500 text-sm">
                    {new Date(topic.createdAt).toLocaleDateString()}
                  </div>
                </div>
                <p className="text-gray-600 mt-1 line-clamp-2">{topic.content}</p>
                <div className="flex items-center mt-2 text-sm text-gray-500">
                  <span className="flex items-center">
                    <User className="w-4 h-4 mr-1" />
                    {topic.author}
                  </span>
                  <span className="flex items-center ml-4">
                    <MessageSquare className="w-4 h-4 mr-1" />
                    {topic.repliesCount} ответов
                  </span>
                </div>
              </Link>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-8 text-gray-500">
          Нет доступных тем. {currentUser?.isAdmin ? 'Создайте первую тему!' : 'Темы появятся позже.'}
        </div>
      )}
      
      {/* Блок чата */}
      <div className="mt-12">
        <h2 className="text-xl font-bold mb-4">Общий чат</h2>
        <Chat />
      </div>
    </div>
  );
};

// Компонент чата
const Chat = () => {
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState('');
  const [socket, setSocket] = useState(null);
  const { currentUser } = React.useContext(AuthContext);
  const messagesEndRef = useRef(null);
  
  useEffect(() => {
    // Подключение к WebSocket
    const chatSocket = ChatService.connect((newMessage) => {
      setMessages((prevMessages) => [...prevMessages, newMessage]);
    });
    
    setSocket(chatSocket);
    
    // Отключение при демонтировании компонента
    return () => {
      if (chatSocket) {
        chatSocket.close();
      }
    };
  }, []);
  
  useEffect(() => {
    // Прокрутка вниз при получении новых сообщений
    scrollToBottom();
  }, [messages]);
  
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };
  
  const handleSendMessage = (e) => {
    e.preventDefault();
    
    if (!message.trim() || !currentUser) return;
    
    ChatService.sendMessage(socket, message);
    setMessage('');
  };
  
  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="h-96 overflow-y-auto p-4">
        {messages.length > 0 ? (
          messages.map((msg, index) => (
            <div key={index} className="mb-3">
              <div className={`flex ${msg.userId === currentUser?.id ? 'justify-end' : 'justify-start'}`}>
                <div className={`rounded-lg px-4 py-2 max-w-xs lg:max-w-md ${
                  msg.userId === currentUser?.id 
                    ? 'bg-blue-100 text-blue-800' 
                    : 'bg-gray-100 text-gray-800'
                }`}>
                  <div className="font-semibold text-xs text-gray-500">
                    {msg.username} • {new Date(msg.timestamp).toLocaleTimeString()}
                  </div>
                  <div className="mt-1">{msg.content}</div>
                </div>
              </div>
            </div>
          ))
        ) : (
          <div className="h-full flex items-center justify-center text-gray-500">
            Сообщений пока нет
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>
      
      <div className="border-t p-4">
        {currentUser ? (
          <form onSubmit={handleSendMessage} className="flex">
            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              placeholder="Введите сообщение..."
              className="flex-1 border rounded-l-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <button
              type="submit"
              className="bg-blue-600 text-white px-4 py-2 rounded-r-lg hover:bg-blue-700 flex items-center"
            >
              <Send className="h-5 w-5" />
            </button>
          </form>
        ) : (
          <div className="text-center text-gray-500 py-2">
            <Link to="/login" className="text-blue-600 hover:underline">Войдите</Link>, чтобы писать сообщения
          </div>
        )}
      </div>
    </div>
  );
};

// Компонент темы форума
const TopicPage = () => {
  const { id } = useParams();
  const [topic, setTopic] = useState(null);
  const [replies, setReplies] = useState([]);
  const [reply, setReply] = useState('');
  const [loading, setLoading] = useState(true);
  const { currentUser } = React.useContext(AuthContext);
  const navigate = useNavigate();
  
  useEffect(() => {
    const fetchTopic = async () => {
      try {
        const data = await ForumService.getTopic(id);
        setTopic(data.topic);
        setReplies(data.replies);
      } catch (error) {
        console.error('Ошибка загрузки темы:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchTopic();
  }, [id]);
  
  const handleSubmitReply = async (e) => {
    e.preventDefault();
    
    if (!reply.trim() || !currentUser) return;
    
    try {
      const newReply = await ForumService.createReply(id, reply);
      setReplies([...replies, newReply]);
      setReply('');
    } catch (error) {
      console.error('Ошибка отправки ответа:', error);
    }
  };
  
  const handleDeleteTopic = async () => {
    if (window.confirm('Вы уверены, что хотите удалить эту тему?')) {
      try {
        await ForumService.deleteTopic(id);
        navigate('/');
      } catch (error) {
        console.error('Ошибка удаления темы:', error);
      }
    }
  };
  
  const handleDeleteReply = async (replyId) => {
    if (window.confirm('Вы уверены, что хотите удалить этот ответ?')) {
      try {
        await ForumService.deleteReply(id, replyId);
        setReplies(replies.filter(r => r.id !== replyId));
      } catch (error) {
        console.error('Ошибка удаления ответа:', error);
      }
    }
  };
  
  if (loading) {
    return <div className="container mx-auto px-4 py-8 text-center">Загрузка...</div>;
  }
  
  if (!topic) {
    return <div className="container mx-auto px-4 py-8 text-center">Тема не найдена</div>;
  }
  
  return (
    <div className="container mx-auto px-4 py-8">
      <Link to="/" className="text-blue-600 hover:underline mb-4 inline-block">
        &larr; Назад к списку тем
      </Link>
      
      <div className="bg-white rounded-lg shadow p-6 mb-8">
        <div className="flex justify-between items-start">
          <h1 className="text-2xl font-bold text-gray-900">{topic.title}</h1>
          {(currentUser?.isAdmin || currentUser?.id === topic.userId) && (
            <button 
              onClick={handleDeleteTopic}
              className="text-red-600 hover:text-red-800"
            >
              <Trash2 className="h-5 w-5" />
            </button>
          )}
        </div>
        
        <div className="flex items-center text-sm text-gray-500 mt-2">
          <span className="flex items-center">
            <User className="w-4 h-4 mr-1" />
            {topic.author}
          </span>
          <span className="ml-4">
            {new Date(topic.createdAt).toLocaleString()}
          </span>
          {topic.isAdmin && (
            <span className="ml-4 flex items-center text-blue-600">
              <Shield className="w-4 h-4 mr-1" />
              Администратор
            </span>
          )}
        </div>
        
        <div className="mt-4 text-gray-700 whitespace-pre-line">
          {topic.content}
        </div>
      </div>
      
      <div className="mb-8">
        <h2 className="text-xl font-bold mb-4">Ответы ({replies.length})</h2>
        
        {replies.length > 0 ? (
          <div className="space-y-4">
            {replies.map((reply) => (
              <div key={reply.id} className="bg-white rounded-lg shadow p-4">
                <div className="flex justify-between">
                  <div className="flex items-center text-sm text-gray-500">
                    <span className="flex items-center">
                      <User className="w-4 h-4 mr-1" />
                      {reply.author}
                    </span>
                    <span className="ml-4">
                      {new Date(reply.createdAt).toLocaleString()}
                    </span>
                    {reply.isAdmin && (
                      <span className="ml-4 flex items-center text-blue-600">
                        <Shield className="w-4 h-4 mr-1" />
                        Администратор
                      </span>
                    )}
                  </div>
                  
                  {(currentUser?.isAdmin || currentUser?.id === reply.userId) && (
                    <button 
                      onClick={() => handleDeleteReply(reply.id)}
                      className="text-red-600 hover:text-red-800"
                    >
                      <Trash2 className="h-5 w-5" />
                    </button>
                  )}
                </div>
                
                <div className="mt-2 text-gray-700 whitespace-pre-line">
                  {reply.content}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow p-6 text-center text-gray-500">
            Пока нет ответов. Будьте первым!
          </div>
        )}
      </div>
      
      {currentUser ? (
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-bold mb-4">Добавить ответ</h3>
          <form onSubmit={handleSubmitReply}>
            <textarea
              value={reply}
              onChange={(e) => setReply(e.target.value)}
              className="w-full border rounded-lg p-3 min-h-32 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Введите ваш ответ..."
              required
            />
            <button
              type="submit"
              className="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
            >
              Отправить
            </button>
          </form>
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow p-6 text-center">
          <p className="text-gray-500">
            <Link to="/login" className="text-blue-600 hover:underline">Войдите</Link>, чтобы оставить ответ
          </p>
        </div>
      )}
    </div>
  );
};

// Компонент создания темы
const CreateTopicPage = () => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const { currentUser } = React.useContext(AuthContext);
  const navigate = useNavigate();
  
  useEffect(() => {
    // Проверка прав администратора
    if (!currentUser || !currentUser.isAdmin) {
      navigate('/');
    }
  }, [currentUser, navigate]);
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!title.trim() || !content.trim()) return;
    
    try {
      const topic = await ForumService.createTopic(title, content);
      navigate(`/topics/${topic.id}`);
    } catch (error) {
      console.error('Ошибка создания темы:', error);
    }
  };
  
  return (
    <div className="container mx-auto px-4 py-8">
      <Link to="/" className="text-blue-600 hover:underline mb-4 inline-block">
        &larr; Назад к списку тем
      </Link>
      
      <div className="bg-white rounded-lg shadow p-6">
        <h1 className="text-2xl font-bold mb-6">Создать новую тему</h1>
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="title" className="block text-gray-700 font-bold mb-2">
              Заголовок
            </label>
            <input
              type="text"
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full border rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Введите заголовок темы"
              required
            />
          </div>
          
          <div className="mb-4">
            <label htmlFor="content" className="block text-gray-700 font-bold mb-2">
              Содержание
            </label>
            <textarea
              id="content"
              value={content}
              onChange={(e) => setContent(e.target.value)}
              className="w-full border rounded-lg p-3 min-h-64 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Введите содержание темы"
              required
            />
          </div>
          
          <button
            type="submit"
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          >
            Создать тему
          </button>
        </form>
      </div>
    </div>
  );
};

// Компонент входа
const LoginPage = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const { login } = React.useContext(AuthContext);
  const navigate = useNavigate();
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    try {
      await login(username, password);
      navigate('/');
    } catch (error) {
      setError('Неверное имя пользователя или пароль');
    }
  };
  
  return (
    <div className="container mx-auto px-4 py-8 max-w-md">
      <h1 className="text-2xl font-bold mb-6 text-center">Вход в систему</h1>
      
      <div className="bg-white rounded-lg shadow p-6">
        {error && (
          <div className="bg-red-100 text-red-800 p-3 rounded mb-4">
            {error}
          </div>
        )}
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="username" className="block text-gray-700 font-bold mb-2">
              Имя пользователя
            </label>
            <input
              type="text"
              id="username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full border rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          
          <div className="mb-6">
            <label htmlFor="password" className="block text-gray-700 font-bold mb-2">
              Пароль
            </label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full border rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          >
            Войти
          </button>
        </form>
        
        <div className="mt-4 text-center">
          <p className="text-gray-600">
            Нет аккаунта?{' '}
            <Link to="/register" className="text-blue-600 hover:underline">
              Зарегистрироваться
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

// Компонент регистрации
const RegisterPage = () => {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const { register } = React.useContext(AuthContext);
  const navigate = useNavigate();
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    if (password !== confirmPassword) {
      setError('Пароли не совпадают');
      return;
    }
    
    try {
      await register(username, email, password);
      navigate('/login', { state: { message: 'Регистрация успешна. Войдите в систему.' } });
    } catch (error) {
      setError('Ошибка регистрации. Возможно, такой пользователь уже существует.');
    }
  };
  
  return (
    <div className="container mx-auto px-4 py-8 max-w-md">
      <h1 className="text-2xl font-bold mb-6 text-center">Регистрация</h1>
      
      <div className="bg-white rounded-lg shadow p-6">
        {error && (
          <div className="bg-red-100 text-red-800 p-3 rounded mb-4">
            {error}
          </div>
        )}
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="username" className="block text-gray-700 font-bold mb-2">
              Имя пользователя
            </label>
            <input
              type="text"
              id="username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full border rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          
          <div className="mb-4">
            <label htmlFor="email" className="block text-gray-700 font-bold mb-2">
              Email
            </label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full border rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          
          <div className="mb-4">
            <label htmlFor="password" className="block text-gray-700 font-bold mb-2">
              Пароль
            </label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full border rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          
          <div className="mb-6">
            <label htmlFor="confirmPassword" className="block text-gray-700 font-bold mb-2">
              Подтверждение пароля
            </label>
            <input
              type="password"
              id="confirmPassword"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              className="w-full border rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          >
            Зарегистрироваться
          </button>
        </form>
        
        <div className="mt-4 text-center">
          <p className="text-gray-600">
            Уже есть аккаунт?{' '}
            <Link to="/login" className="text-blue-600 hover:underline">
              Войти
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

// Компонент профиля
const ProfilePage = () => {
  const { currentUser } = React.useContext(AuthContext);
  const navigate = useNavigate();
  
  useEffect(() => {
    if (!currentUser) {
      navigate('/login');
    }
  }, [currentUser, navigate]);
  
  if (!currentUser) {
    return null;
  }
  
  return (
    <div className="container mx-auto px-4 py-8 max-w-md">
      <h1 className="text-2xl font-bold mb-6">Профиль пользователя</h1>
      
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex items-center justify-center mb-6">
          <div className="w-24 h-24 bg-blue-600 rounded-full flex items-center justify-center text-white text-2xl font-bold">
            {currentUser.username.charAt(0).toUpperCase()}
          </div>
        </div>
        
        <div className="mb-4">
          <h2 className="text-gray-500 text-sm">Имя пользователя</h2>
          <p className="text-lg font-semibold">{currentUser.username}</p>
        </div>
        
        <div className="mb-4">
          <h2 className="text-gray-500 text-sm">Email</h2>
          <p className="text-lg font-semibold">{currentUser.email}</p>
        </div>
        
        <div className="mb-4">
          <h2 className="text-gray-500 text-sm">Роль</h2>
          <p className="text-lg font-semibold">{currentUser.isAdmin ? 'Администратор' : 'Пользователь'}</p>
        </div>
        
        <div className="mb-4">
          <h2 className="text-gray-500 text-sm">Дата регистрации</h2>
          <p className="text-lg font-semibold">{new Date(currentUser.createdAt).toLocaleDateString()}</p>
        </div>
      </div>
    </div>
  );
};

// Компонент административной панели
const AdminPage = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const { currentUser } = React.useContext(AuthContext);
  const navigate = useNavigate();
  
  useEffect(() => {
    // Проверка прав администратора
    if (!currentUser || !currentUser.isAdmin) {
      navigate('/');
      return;
    }
    
    // Загрузка списка пользователей
    const fetchUsers = async () => {
      try {
        const response = await AuthService.authFetch(`${API_URL}/auth/users`);
        const data = await response.json();
        setUsers(data);
      } catch (error) {
        console.error('Ошибка загрузки пользователей:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchUsers();
  }, [currentUser, navigate]);
  
  const toggleAdminStatus = async (userId, isAdmin) => {
    try {
      const response = await AuthService.authFetch(`${API_URL}/auth/users/${userId}/admin`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ isAdmin: !isAdmin }),
      });
      
      const updatedUser = await response.json();
      
      setUsers(users.map(user => 
        user.id === userId ? { ...user, isAdmin: updatedUser.isAdmin } : user
      ));
    } catch (error) {
      console.error('Ошибка изменения статуса администратора:', error);
    }
  };
  
  const deleteUser = async (userId) => {
    if (window.confirm('Вы уверены, что хотите удалить этого пользователя?')) {
      try {
        await AuthService.authFetch(`${API_URL}/auth/users/${userId}`, {
          method: 'DELETE',
        });
        
        setUsers(users.filter(user => user.id !== userId));
      } catch (error) {
        console.error('Ошибка удаления пользователя:', error);
      }
    }
  };
  
  if (!currentUser || !currentUser.isAdmin) {
    return null;
  }
  
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-6">Административная панель</h1>
      
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="p-4 bg-gray-100 border-b">
          <h2 className="font-bold">Управление пользователями</h2>
        </div>
        
        {loading ? (
          <div className="p-4 text-center">Загрузка...</div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Пользователь
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Email
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Статус
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Дата регистрации
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Действия
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {users.map((user) => (
                  <tr key={user.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="font-medium text-gray-900">{user.username}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-gray-500">{user.email}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        user.isAdmin 
                          ? 'bg-blue-100 text-blue-800' 
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {user.isAdmin ? 'Администратор' : 'Пользователь'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-gray-500">
                      {new Date(user.createdAt).toLocaleDateString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button
                        onClick={() => toggleAdminStatus(user.id, user.isAdmin)}
                        className="text-blue-600 hover:text-blue-900 mr-4"
                      >
                        {user.isAdmin ? 'Снять админа' : 'Сделать админом'}
                      </button>
                      <button
                        onClick={() => deleteUser(user.id)}
                        className="text-red-600 hover:text-red-900"
                        disabled={user.id === currentUser.id}
                      >
                        Удалить
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
      
      <div className="mt-8 bg-white rounded-lg shadow overflow-hidden">
        <div className="p-4 bg-gray-100 border-b">
          <h2 className="font-bold">Статистика форума</h2>
        </div>
        
        <div className="p-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="text-blue-500 text-lg font-bold">{users.length}</div>
              <div className="text-gray-600">Пользователей</div>
            </div>
            
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="text-green-500 text-lg font-bold">--</div>
              <div className="text-gray-600">Тем</div>
            </div>
            
            <div className="bg-purple-50 p-4 rounded-lg">
              <div className="text-purple-500 text-lg font-bold">--</div>
              <div className="text-gray-600">Сообщений</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Компонент защищенного маршрута
const ProtectedRoute = ({ isAdmin, children }) => {
  const { currentUser, loading } = React.useContext(AuthContext);
  const navigate = useNavigate();
  
  useEffect(() => {
    if (!loading) {
      if (!currentUser) {
        navigate('/login');
      } else if (isAdmin && !currentUser.isAdmin) {
        navigate('/');
      }
    }
  }, [currentUser, loading, navigate, isAdmin]);
  
  if (loading) {
    return <div className="container mx-auto px-4 py-8 text-center">Загрузка...</div>;
  }
  
  return children;
};

// Главный компонент приложения

const App = () => {
  return (
    <Router>
      <AuthProvider>
        <div className="min-h-screen bg-gray-100">
          <Header />
          
          <main className="py-4">
            <Routes>
              <Route path="/" element={<HomePage />} />
              <Route path="/login" element={<LoginPage />} />
              <Route path="/register" element={<RegisterPage />} />
              <Route path="/topics/:id" element={<TopicPage />} />
              <Route 
                path="/create-topic" 
                element={
                  <ProtectedRoute isAdmin={true}>
                    <CreateTopicPage />
                  </ProtectedRoute>
                } 
              />
              <Route 
                path="/profile" 
                element={
                  <ProtectedRoute>
                    <ProfilePage />
                  </ProtectedRoute>
                } 
              />
              <Route 
                path="/admin" 
                element={
                  <ProtectedRoute isAdmin={true}>
                    <AdminPage />
                  </ProtectedRoute>
                } 
              />
              <Route path="*" element={<Navigate to="/" replace />} />
            </Routes>
          </main>
          
          <footer className="bg-gray-800 text-white py-6 mt-8">
            <div className="container mx-auto px-4">
              <div className="flex flex-col md:flex-row justify-between items-center">
                <div className="mb-4 md:mb-0">
                  <h2 className="text-xl font-bold">ФорумGo</h2>
                  <p className="text-gray-400">Микросервисный форум на Go и React</p>
                </div>
                <div className="text-gray-400 text-sm">
                  &copy; {new Date().getFullYear()} ФорумGo. Все права защищены.
                </div>
              </div>
            </div>
          </footer>
        </div>
      </AuthProvider>
    </Router>
  );
};

export default App;