// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth_service/internal/usecase/auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/netabakovv/forum/back/auth_service/internal/entities"
)

// MockAuthUsecaseInterface is a mock of AuthUsecaseInterface interface.
type MockAuthUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseInterfaceMockRecorder
}

// MockAuthUsecaseInterfaceMockRecorder is the mock recorder for MockAuthUsecaseInterface.
type MockAuthUsecaseInterfaceMockRecorder struct {
	mock *MockAuthUsecaseInterface
}

// NewMockAuthUsecaseInterface creates a new mock instance.
func NewMockAuthUsecaseInterface(ctrl *gomock.Controller) *MockAuthUsecaseInterface {
	mock := &MockAuthUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecaseInterface) EXPECT() *MockAuthUsecaseInterfaceMockRecorder {
	return m.recorder
}

// IsAdmin mocks base method.
func (m *MockAuthUsecaseInterface) IsAdmin(ctx context.Context, userID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockAuthUsecaseInterfaceMockRecorder) IsAdmin(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockAuthUsecaseInterface)(nil).IsAdmin), ctx, userID)
}

// Login mocks base method.
func (m *MockAuthUsecaseInterface) Login(ctx context.Context, username, password string) (*entities.TokenPair, *entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(*entities.TokenPair)
	ret1, _ := ret[1].(*entities.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockAuthUsecaseInterfaceMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthUsecaseInterface)(nil).Login), ctx, username, password)
}

// Logout mocks base method.
func (m *MockAuthUsecaseInterface) Logout(ctx context.Context, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthUsecaseInterfaceMockRecorder) Logout(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthUsecaseInterface)(nil).Logout), ctx, refreshToken)
}

// RefreshTokens mocks base method.
func (m *MockAuthUsecaseInterface) RefreshTokens(ctx context.Context, refreshToken string) (*entities.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", ctx, refreshToken)
	ret0, _ := ret[0].(*entities.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockAuthUsecaseInterfaceMockRecorder) RefreshTokens(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockAuthUsecaseInterface)(nil).RefreshTokens), ctx, refreshToken)
}

// Register mocks base method.
func (m *MockAuthUsecaseInterface) Register(ctx context.Context, username, password string) (*entities.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, username, password)
	ret0, _ := ret[0].(*entities.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthUsecaseInterfaceMockRecorder) Register(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthUsecaseInterface)(nil).Register), ctx, username, password)
}

// RevokeTokens mocks base method.
func (m *MockAuthUsecaseInterface) RevokeTokens(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeTokens", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeTokens indicates an expected call of RevokeTokens.
func (mr *MockAuthUsecaseInterfaceMockRecorder) RevokeTokens(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeTokens", reflect.TypeOf((*MockAuthUsecaseInterface)(nil).RevokeTokens), ctx, userID)
}

// ValidateToken mocks base method.
func (m *MockAuthUsecaseInterface) ValidateToken(ctx context.Context, token string) (*entities.TokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token)
	ret0, _ := ret[0].(*entities.TokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthUsecaseInterfaceMockRecorder) ValidateToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthUsecaseInterface)(nil).ValidateToken), ctx, token)
}
