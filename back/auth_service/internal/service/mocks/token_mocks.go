// Code generated by MockGen. DO NOT EDIT.
// Source: auth_service/internal/service/token_service.go
//
// Generated by this command:
//
//	mockgen -source=auth_service/internal/service/token_service.go -destination=auth_service/internal/service/mocks/token_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "github.com/netabakovv/forum/back/auth_service/internal/entities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenServiceInterface is a mock of TokenServiceInterface interface.
type MockTokenServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockTokenServiceInterfaceMockRecorder is the mock recorder for MockTokenServiceInterface.
type MockTokenServiceInterfaceMockRecorder struct {
	mock *MockTokenServiceInterface
}

// NewMockTokenServiceInterface creates a new mock instance.
func NewMockTokenServiceInterface(ctrl *gomock.Controller) *MockTokenServiceInterface {
	mock := &MockTokenServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTokenServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenServiceInterface) EXPECT() *MockTokenServiceInterfaceMockRecorder {
	return m.recorder
}

// GenerateTokenPair mocks base method.
func (m *MockTokenServiceInterface) GenerateTokenPair(userID int64, username string, isAdmin bool) (*entities.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenPair", userID, username, isAdmin)
	ret0, _ := ret[0].(*entities.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokenPair indicates an expected call of GenerateTokenPair.
func (mr *MockTokenServiceInterfaceMockRecorder) GenerateTokenPair(userID, username, isAdmin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenPair", reflect.TypeOf((*MockTokenServiceInterface)(nil).GenerateTokenPair), userID, username, isAdmin)
}

// ValidateToken mocks base method.
func (m *MockTokenServiceInterface) ValidateToken(tokenString string) (*entities.TokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(*entities.TokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenServiceInterfaceMockRecorder) ValidateToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenServiceInterface)(nil).ValidateToken), tokenString)
}
