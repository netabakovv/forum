// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth_service/internal/delivery/grpc/handlers/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	handlers "back/auth_service/internal/delivery/grpc/handlers"
	logger "back/pkg/logger"
	proto "back/proto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserServiceClientInterface is a mock of UserServiceClientInterface interface.
type MockUserServiceClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientInterfaceMockRecorder
}

// MockUserServiceClientInterfaceMockRecorder is the mock recorder for MockUserServiceClientInterface.
type MockUserServiceClientInterfaceMockRecorder struct {
	mock *MockUserServiceClientInterface
}

// NewMockUserServiceClientInterface creates a new mock instance.
func NewMockUserServiceClientInterface(ctrl *gomock.Controller) *MockUserServiceClientInterface {
	mock := &MockUserServiceClientInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClientInterface) EXPECT() *MockUserServiceClientInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUserServiceClientInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUserServiceClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUserServiceClientInterface)(nil).Close))
}

// GetUserByID mocks base method.
func (m *MockUserServiceClientInterface) GetUserByID(ctx context.Context, userID int64) (*proto.UserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*proto.UserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceClientInterfaceMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserServiceClientInterface)(nil).GetUserByID), ctx, userID)
}

// NewUserServiceClient mocks base method.
func (m *MockUserServiceClientInterface) NewUserServiceClient(addr string, logger logger.Logger) (*handlers.UserServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserServiceClient", addr, logger)
	ret0, _ := ret[0].(*handlers.UserServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUserServiceClient indicates an expected call of NewUserServiceClient.
func (mr *MockUserServiceClientInterfaceMockRecorder) NewUserServiceClient(addr, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserServiceClient", reflect.TypeOf((*MockUserServiceClientInterface)(nil).NewUserServiceClient), addr, logger)
}
