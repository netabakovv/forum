// Code generated by MockGen. DO NOT EDIT.
// Source: ./forum_service/internal/usecase/forum.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/netabakovv/forum/back/forum_service/internal/entities"
)

// MockChatUsecaseInterface is a mock of ChatUsecaseInterface interface.
type MockChatUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChatUsecaseInterfaceMockRecorder
}

// MockChatUsecaseInterfaceMockRecorder is the mock recorder for MockChatUsecaseInterface.
type MockChatUsecaseInterfaceMockRecorder struct {
	mock *MockChatUsecaseInterface
}

// NewMockChatUsecaseInterface creates a new mock instance.
func NewMockChatUsecaseInterface(ctrl *gomock.Controller) *MockChatUsecaseInterface {
	mock := &MockChatUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockChatUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatUsecaseInterface) EXPECT() *MockChatUsecaseInterfaceMockRecorder {
	return m.recorder
}

// DeleteOldMessages mocks base method.
func (m *MockChatUsecaseInterface) DeleteOldMessages(ctx context.Context, cutoff time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldMessages", ctx, cutoff)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldMessages indicates an expected call of DeleteOldMessages.
func (mr *MockChatUsecaseInterfaceMockRecorder) DeleteOldMessages(ctx, cutoff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldMessages", reflect.TypeOf((*MockChatUsecaseInterface)(nil).DeleteOldMessages), ctx, cutoff)
}

// GetMessages mocks base method.
func (m *MockChatUsecaseInterface) GetMessages(ctx context.Context) ([]*entities.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx)
	ret0, _ := ret[0].([]*entities.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockChatUsecaseInterfaceMockRecorder) GetMessages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockChatUsecaseInterface)(nil).GetMessages), ctx)
}

// SendMessage mocks base method.
func (m *MockChatUsecaseInterface) SendMessage(ctx context.Context, msg *entities.ChatMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockChatUsecaseInterfaceMockRecorder) SendMessage(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockChatUsecaseInterface)(nil).SendMessage), ctx, msg)
}

// MockPostUsecaseInterface is a mock of PostUsecaseInterface interface.
type MockPostUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostUsecaseInterfaceMockRecorder
}

// MockPostUsecaseInterfaceMockRecorder is the mock recorder for MockPostUsecaseInterface.
type MockPostUsecaseInterfaceMockRecorder struct {
	mock *MockPostUsecaseInterface
}

// NewMockPostUsecaseInterface creates a new mock instance.
func NewMockPostUsecaseInterface(ctrl *gomock.Controller) *MockPostUsecaseInterface {
	mock := &MockPostUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockPostUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostUsecaseInterface) EXPECT() *MockPostUsecaseInterfaceMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostUsecaseInterface) CreatePost(ctx context.Context, post *entities.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostUsecaseInterfaceMockRecorder) CreatePost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostUsecaseInterface)(nil).CreatePost), ctx, post)
}

// DeletePost mocks base method.
func (m *MockPostUsecaseInterface) DeletePost(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostUsecaseInterfaceMockRecorder) DeletePost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostUsecaseInterface)(nil).DeletePost), ctx, id)
}

// GetPostByID mocks base method.
func (m *MockPostUsecaseInterface) GetPostByID(ctx context.Context, id int64) (*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", ctx, id)
	ret0, _ := ret[0].(*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostUsecaseInterfaceMockRecorder) GetPostByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostUsecaseInterface)(nil).GetPostByID), ctx, id)
}

// Posts mocks base method.
func (m *MockPostUsecaseInterface) Posts(ctx context.Context) ([]*entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Posts", ctx)
	ret0, _ := ret[0].([]*entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Posts indicates an expected call of Posts.
func (mr *MockPostUsecaseInterfaceMockRecorder) Posts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Posts", reflect.TypeOf((*MockPostUsecaseInterface)(nil).Posts), ctx)
}

// UpdatePost mocks base method.
func (m *MockPostUsecaseInterface) UpdatePost(ctx context.Context, post *entities.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostUsecaseInterfaceMockRecorder) UpdatePost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostUsecaseInterface)(nil).UpdatePost), ctx, post)
}

// MockCommentUsecaseInterface is a mock of CommentUsecaseInterface interface.
type MockCommentUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommentUsecaseInterfaceMockRecorder
}

// MockCommentUsecaseInterfaceMockRecorder is the mock recorder for MockCommentUsecaseInterface.
type MockCommentUsecaseInterfaceMockRecorder struct {
	mock *MockCommentUsecaseInterface
}

// NewMockCommentUsecaseInterface creates a new mock instance.
func NewMockCommentUsecaseInterface(ctrl *gomock.Controller) *MockCommentUsecaseInterface {
	mock := &MockCommentUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockCommentUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentUsecaseInterface) EXPECT() *MockCommentUsecaseInterfaceMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentUsecaseInterface) CreateComment(ctx context.Context, comment *entities.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentUsecaseInterfaceMockRecorder) CreateComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentUsecaseInterface)(nil).CreateComment), ctx, comment)
}

// DeleteComment mocks base method.
func (m *MockCommentUsecaseInterface) DeleteComment(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentUsecaseInterfaceMockRecorder) DeleteComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentUsecaseInterface)(nil).DeleteComment), ctx, id)
}

// GetByPostID mocks base method.
func (m *MockCommentUsecaseInterface) GetByPostID(ctx context.Context, postID int64) ([]*entities.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPostID", ctx, postID)
	ret0, _ := ret[0].([]*entities.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPostID indicates an expected call of GetByPostID.
func (mr *MockCommentUsecaseInterfaceMockRecorder) GetByPostID(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPostID", reflect.TypeOf((*MockCommentUsecaseInterface)(nil).GetByPostID), ctx, postID)
}

// GetByUserID mocks base method.
func (m *MockCommentUsecaseInterface) GetByUserID(ctx context.Context, userID int64) ([]*entities.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]*entities.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockCommentUsecaseInterfaceMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockCommentUsecaseInterface)(nil).GetByUserID), ctx, userID)
}

// GetCommentByID mocks base method.
func (m *MockCommentUsecaseInterface) GetCommentByID(ctx context.Context, id int64) (*entities.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", ctx, id)
	ret0, _ := ret[0].(*entities.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockCommentUsecaseInterfaceMockRecorder) GetCommentByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockCommentUsecaseInterface)(nil).GetCommentByID), ctx, id)
}

// UpdateComment mocks base method.
func (m *MockCommentUsecaseInterface) UpdateComment(ctx context.Context, comment *entities.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentUsecaseInterfaceMockRecorder) UpdateComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentUsecaseInterface)(nil).UpdateComment), ctx, comment)
}
