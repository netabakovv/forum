// Code generated by MockGen. DO NOT EDIT.
// Source: forum_service/internal/usecase/forum.go
//
// Generated by this command:
//
//	mockgen -source=forum_service/internal/usecase/forum.go -destination=forum_service/internal/usecase/mocks/uc_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "back/forum_service/internal/entities"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockChatUsecaseInterface is a mock of ChatUsecaseInterface interface.
type MockChatUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChatUsecaseInterfaceMockRecorder
	isgomock struct{}
}

// MockChatUsecaseInterfaceMockRecorder is the mock recorder for MockChatUsecaseInterface.
type MockChatUsecaseInterfaceMockRecorder struct {
	mock *MockChatUsecaseInterface
}

// NewMockChatUsecaseInterface creates a new mock instance.
func NewMockChatUsecaseInterface(ctrl *gomock.Controller) *MockChatUsecaseInterface {
	mock := &MockChatUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockChatUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatUsecaseInterface) EXPECT() *MockChatUsecaseInterfaceMockRecorder {
	return m.recorder
}

// DeleteOldMessages mocks base method.
func (m *MockChatUsecaseInterface) DeleteOldMessages(ctx context.Context, cutoff time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldMessages", ctx, cutoff)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldMessages indicates an expected call of DeleteOldMessages.
func (mr *MockChatUsecaseInterfaceMockRecorder) DeleteOldMessages(ctx, cutoff any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldMessages", reflect.TypeOf((*MockChatUsecaseInterface)(nil).DeleteOldMessages), ctx, cutoff)
}

// GetMessages mocks base method.
func (m *MockChatUsecaseInterface) GetMessages(ctx context.Context) ([]*entities.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx)
	ret0, _ := ret[0].([]*entities.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockChatUsecaseInterfaceMockRecorder) GetMessages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockChatUsecaseInterface)(nil).GetMessages), ctx)
}

// SendMessage mocks base method.
func (m *MockChatUsecaseInterface) SendMessage(ctx context.Context, msg *entities.ChatMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockChatUsecaseInterfaceMockRecorder) SendMessage(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockChatUsecaseInterface)(nil).SendMessage), ctx, msg)
}

// MockCommentUsecaseInterface is a mock of CommentUsecaseInterface interface.
type MockCommentUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommentUsecaseInterfaceMockRecorder
	isgomock struct{}
}

// MockCommentUsecaseInterfaceMockRecorder is the mock recorder for MockCommentUsecaseInterface.
type MockCommentUsecaseInterfaceMockRecorder struct {
	mock *MockCommentUsecaseInterface
}

// NewMockCommentUsecaseInterface creates a new mock instance.
func NewMockCommentUsecaseInterface(ctrl *gomock.Controller) *MockCommentUsecaseInterface {
	mock := &MockCommentUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockCommentUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentUsecaseInterface) EXPECT() *MockCommentUsecaseInterfaceMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentUsecaseInterface) CreateComment(ctx context.Context, comment *entities.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentUsecaseInterfaceMockRecorder) CreateComment(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentUsecaseInterface)(nil).CreateComment), ctx, comment)
}

// DeleteComment mocks base method.
func (m *MockCommentUsecaseInterface) DeleteComment(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentUsecaseInterfaceMockRecorder) DeleteComment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentUsecaseInterface)(nil).DeleteComment), ctx, id)
}

// GetByPostID mocks base method.
func (m *MockCommentUsecaseInterface) GetByPostID(ctx context.Context, postID int64) ([]*entities.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPostID", ctx, postID)
	ret0, _ := ret[0].([]*entities.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPostID indicates an expected call of GetByPostID.
func (mr *MockCommentUsecaseInterfaceMockRecorder) GetByPostID(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPostID", reflect.TypeOf((*MockCommentUsecaseInterface)(nil).GetByPostID), ctx, postID)
}

// GetByUserID mocks base method.
func (m *MockCommentUsecaseInterface) GetByUserID(ctx context.Context, userID int64) ([]*entities.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]*entities.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockCommentUsecaseInterfaceMockRecorder) GetByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockCommentUsecaseInterface)(nil).GetByUserID), ctx, userID)
}

// GetCommentByID mocks base method.
func (m *MockCommentUsecaseInterface) GetCommentByID(ctx context.Context, id int64) (*entities.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", ctx, id)
	ret0, _ := ret[0].(*entities.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockCommentUsecaseInterfaceMockRecorder) GetCommentByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockCommentUsecaseInterface)(nil).GetCommentByID), ctx, id)
}

// UpdateComment mocks base method.
func (m *MockCommentUsecaseInterface) UpdateComment(ctx context.Context, comment *entities.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentUsecaseInterfaceMockRecorder) UpdateComment(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentUsecaseInterface)(nil).UpdateComment), ctx, comment)
}
