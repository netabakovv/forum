// Code generated by MockGen. DO NOT EDIT.
// Source: forum_service/internal/service/cleanup.go

// Package mocks is a generated GoMock package.
package mocks

import (
	service "back/forum_service/internal/service"
	usecase "back/forum_service/internal/usecase"
	logger "back/pkg/logger"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCleanupServiceInterface is a mock of CleanupServiceInterface interface.
type MockCleanupServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCleanupServiceInterfaceMockRecorder
}

// MockCleanupServiceInterfaceMockRecorder is the mock recorder for MockCleanupServiceInterface.
type MockCleanupServiceInterfaceMockRecorder struct {
	mock *MockCleanupServiceInterface
}

// NewMockCleanupServiceInterface creates a new mock instance.
func NewMockCleanupServiceInterface(ctrl *gomock.Controller) *MockCleanupServiceInterface {
	mock := &MockCleanupServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCleanupServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCleanupServiceInterface) EXPECT() *MockCleanupServiceInterfaceMockRecorder {
	return m.recorder
}

// NewCleanupService mocks base method.
func (m *MockCleanupServiceInterface) NewCleanupService(chatUC *usecase.ChatUsecase, logger logger.Logger) *service.CleanupService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCleanupService", chatUC, logger)
	ret0, _ := ret[0].(*service.CleanupService)
	return ret0
}

// NewCleanupService indicates an expected call of NewCleanupService.
func (mr *MockCleanupServiceInterfaceMockRecorder) NewCleanupService(chatUC, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCleanupService", reflect.TypeOf((*MockCleanupServiceInterface)(nil).NewCleanupService), chatUC, logger)
}

// Start mocks base method.
func (m *MockCleanupServiceInterface) Start(interval, lifetime time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", interval, lifetime)
}

// Start indicates an expected call of Start.
func (mr *MockCleanupServiceInterfaceMockRecorder) Start(interval, lifetime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCleanupServiceInterface)(nil).Start), interval, lifetime)
}

// Stop mocks base method.
func (m *MockCleanupServiceInterface) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockCleanupServiceInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCleanupServiceInterface)(nil).Stop))
}

// cleanupOldMessages mocks base method.
func (m *MockCleanupServiceInterface) cleanupOldMessages(lifetime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "cleanupOldMessages", lifetime)
	ret0, _ := ret[0].(error)
	return ret0
}

// cleanupOldMessages indicates an expected call of cleanupOldMessages.
func (mr *MockCleanupServiceInterfaceMockRecorder) cleanupOldMessages(lifetime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cleanupOldMessages", reflect.TypeOf((*MockCleanupServiceInterface)(nil).cleanupOldMessages), lifetime)
}
