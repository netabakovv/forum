version: "3"

vars:
  TEST_DB_URL: "postgres://postgres:1@localhost:5555/forum_test?sslmode=disable"
  TEST_COMPOSE_FILE: "docker-compose.test.yml"


tasks:
  up:
    desc: "Запуск всех сервисов через docker-compose"
    cmds:
      - docker-compose up --build
  down:
    desc: "Остановка и удаление контейнеров"
    cmds:
      - docker-compose down -v
      
  start-f:
    desc: "Start a server"
    cmds:
      - |
        go run forum_service/cmd/main/main.go
  start-g:
    desc: "Start a server"
    cmds:
      - |
        go run gateway/cmd/main.go
  start-a:
    desc: "Start a server"
    cmds:
      - |
        go run auth_service/cmd/main/main.go

  coverage:
    aliases:
      - "cover"
    desc: "Checking test cover"
    cmds:
      - "go test -cover ./auth_service/internal/delivery/grpc/handlers"
      - "go tool cover -html=coverage.out"

  test:
    desc: "Run go test with coverage on a given path"
    cmds:
      - |
        go test -coverprofile={{.DIR}}/coverage.out {{.DIR}}
        go tool cover -html={{.DIR}}/coverage.out -o {{.DIR}}/coverage.html
    requires:
      vars: [DIR]
    silent: false


  generate-mock:
    aliases:
      - "mock"
    desc: "Сгенерировать мок для заданного интерфейса"
    cmds:
      - |
        mockgen -source={{.PACKAGE}}/{{.INPNAME}} -destination={{.PACKAGE}}/mocks/{{.FILENAME}}.go -package=mocks
    requires:
      vars: [PACKAGE,INPNAME,FILENAME]

  run-auth:
    desc: "Запустить gRPC сервер авторизации"
    cmds:
      - go run auth_service/cmd/main/main.go
    dir: ./back

  proto:
    desc: "Generate proto files"
    cmds:
      - protoc --proto_path=. 
        --go_out=. --go_opt=paths=source_relative 
        --go-grpc_out=. --go-grpc_opt=paths=source_relative 
        proto/*.proto

  proto-clean:
    desc: "Clean generated proto files"
    cmds:
      - rm -f proto/*.pb.go
      - rm -f proto/*_grpc.pb.go

  generate:
    aliases:
      - gen
    desc: "Generate all"
    deps:
      - proto
    cmds:
      - task: swagger
    
  migrate:
    cmds:
      - migrate -path db/migrations -database "postgres://user:pass@localhost:5432/forum?sslmode=disable" up

  migrate user:
    aliases:
      - "auth"
    desc: "Generate auth migrations"
    cmds:
      - "migrate create -ext sql -dir migrations -seq create_auth_tables"

  migrate posts:
    aliases:
      - "post"
    desc: "Generate post migrations"
    cmds:
      - "migrate create -ext sql -dir migrations -seq create_post_tables"

  migrate comments:
    aliases:
      - "comm"
    desc: "Generate comment migrations"
    cmds:
      - "migrate create -ext sql -dir migrations -seq create_comments_table"

  test:setup:
    desc: "Настройка тестовой среды"
    cmds:
      - docker-compose -f {{.TEST_COMPOSE_FILE}} down -v
      - docker-compose -f {{.TEST_COMPOSE_FILE}} pull
      - docker-compose -f {{.TEST_COMPOSE_FILE}} build
      - docker-compose -f {{.TEST_COMPOSE_FILE}} up -d postgres-test
      - task: test:wait-db
      - task: test:migrate

  test:wait-db:
    desc: "Ожидание готовности базы данных"
    cmds:
      - |
        echo "Waiting for database to be ready..."
        for i in {1..30}; do
          if docker-compose -f {{.TEST_COMPOSE_FILE}} exec -T postgres-test pg_isready -U postgres -d forum_test; then
            echo "Database is ready!"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 2
        done

  test:migrate:
    desc: "Запуск миграций для тестовой БД"
    cmds:
      - migrate -path migrations -database "{{.TEST_DB_URL}}" up

  test:services:
    desc: "Запуск всех тестовых сервисов"
    deps: [test:setup]
    cmds:
      - docker-compose -f {{.TEST_COMPOSE_FILE}} up -d
      - task: test:wait-services

  test:wait-services:
    desc: "Ожидание готовности всех сервисов"
    cmds:
      - |
        echo "Waiting for all services to be ready..."
        for i in {1..60}; do
          if docker-compose -f {{.TEST_COMPOSE_FILE}} exec -T auth-service-test grpc_health_probe -addr=localhost:50053 2>/dev/null && \
             docker-compose -f {{.TEST_COMPOSE_FILE}} exec -T forum-service-test grpc_health_probe -addr=localhost:50051 2>/dev/null && \
             curl -f http://localhost:8090/health 2>/dev/null; then
            echo "All services are ready!"
            break
          fi
          echo "Waiting for services... ($i/60)"
          sleep 4
        done