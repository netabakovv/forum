syntax = "proto3";
package proto;

option go_package = "back/proto";

// Определяем собственное пустое сообщение
message EmptyMessage {}

// ================== Auth Service ==================
service AuthService {
    // Register creates a new user account
    rpc Register(RegisterRequest) returns (RegisterResponse);

    // User operations
    rpc GetUserByID(GetUserRequest) returns (UserProfileResponse);


    // Login authenticates user and returns access/refresh tokens
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
    rpc ValidateToken(ValidateRequest) returns (ValidateResponse);
    rpc Logout(LogoutRequest) returns (LogoutResponse);
    rpc CheckAdminStatus(CheckAdminRequest) returns (CheckAdminResponse);
}

message RegisterRequest {
    string username = 1;
    string password = 2;
}

message RegisterResponse {
    string access_token = 1;
    string refresh_token = 2;
    int64 expires_at = 3;  // Unix timestamp
}

message LoginRequest {
    string username = 1;
    string password = 2;
}

message LoginResponse {
    string access_token = 1;
    string refresh_token = 2;
    int64 expires_at = 3;  // Unix timestamp
    UserProfileResponse user = 4;
}

message RefreshTokenRequest {
    string refresh_token = 1;
}

message RefreshTokenResponse {
    string access_token = 1;
    string refresh_token = 2;
    int64 expires_at = 3;  // Unix timestamp
}

message ValidateRequest {
    string access_token = 1;
}

message ValidateResponse {
    bool is_valid = 1;
    int64 user_id = 2;
    string username = 3;
    bool is_admin = 4;
}

message LogoutRequest {
    string access_token = 1;
}

message LogoutResponse {
    bool success = 1;
}

// ================== Forum Service ==================
service ForumService {
    // Post operations
    rpc CreatePost(CreatePostRequest) returns (PostResponse);
    rpc GetPost(GetPostRequest) returns (PostResponse);
    rpc UpdatePost(UpdatePostRequest) returns (PostResponse);
    rpc DeletePost(DeletePostRequest) returns (EmptyMessage);
    rpc Posts(ListPostsRequest) returns (ListPostsResponse);
    
    // Comment operations
    rpc CreateComment(CreateCommentRequest) returns (CommentResponse);
    rpc GetCommentByID(GetCommentRequest) returns (CommentResponse);
    rpc GetByPostID(GetCommentsByPostIDRequest) returns (ListCommentsResponse);
    rpc Comments(ListCommentsRequest) returns (ListCommentsResponse);
    rpc UpdateComment(UpdateCommentRequest) returns (CommentResponse);
    rpc DeleteComment(DeleteCommentRequest) returns (EmptyMessage);
    

    // Chat operations
    rpc SendMessage(ChatMessage) returns (EmptyMessage);
    rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
    
}

// ================== Post Service ==================
message Post {
    int64 id = 1;
    string title = 2;
    string content = 3;
    int64 author_id = 4;
    string author_username = 5;
    int64 created_at = 6;  
    int32 comment_count = 7;
}

message PostResponse {
    Post post = 1;
}

message CreatePostRequest {
    string title = 1;
    string content = 2;
    int64 author_id = 3;
    string author_username = 4;
}

message GetPostRequest {
    int64 post_id = 1;
}

message UpdatePostRequest {
    int64 post_id = 1;
    optional string title = 2;
    optional string content = 3;
}

message DeletePostRequest {
    int64 post_id = 1;
    int64 user_id = 2; // Для проверки прав
}

message ListPostsRequest {
    optional int64 author_id = 1;
}

message ListPostsResponse {
    repeated Post posts = 1;
    int32 total_count = 2;
}

// ================== Comment Service ==================
message Comment {
    int64 id = 1;
    string content = 2;
    int64 author_id = 3;
    string author_username = 4;
    int64 post_id = 5;
    int64 created_at = 6;
}

message CommentResponse {
    Comment comment = 1;
}

message CreateCommentRequest {
    string content = 1;
    int64 author_id = 2;
    int64 post_id = 3;
    string author_username = 4;
}

message GetCommentRequest {
    int64 comment_id = 1;
}

message GetCommentsByPostIDRequest {
    int64 post_id = 1;
}

message ListCommentsRequest {
    int64 post_id = 1;
}

message ListCommentsResponse {
    repeated Comment comments = 1;
    int32 total_count = 2;
}

message UpdateCommentRequest {
    int64 comment_id = 1;
    optional string content = 2;
}

message DeleteCommentRequest {
    int64 comment_id = 1;
    int64 user_id = 2; // Для проверки прав
}

// ================== Chat Service ==================
message ChatMessage {
    int64 user_id = 1;
    string content = 2;
    int64 created_at = 3;  // Unix timestamp
}

message GetMessagesRequest {
}

message GetMessagesResponse {
    repeated ChatMessage messages = 1;
    int32 total_count = 2;
}

message ChatConfig {
    int32 message_lifetime_minutes = 1;  // Время жизни сообщений
    int32 max_message_length = 2;      // Максимальная длина сообщения
    bool only_authenticated = 3;        // Только для авторизованных
}

// Общая модель пользователя для всех сервисов
message User {
    int64 id = 1;
    string username = 2;
    int64 created_at = 3;  // Unix timestamp
}

message GetUserRequest {
    int64 user_id = 1;
}

message UserProfileResponse {
    int64 userId = 1;
    string username = 2;
    int64 created_at = 3;  // Unix timestamp
    int32 post_count = 4;
    int32 comment_count = 5;
    bool is_admin = 6;
}


// ================== Error Handling ==================
enum ErrorCode {
    ERROR_UNSPECIFIED = 0;
    ERROR_INVALID_CREDENTIALS = 1;
    ERROR_USER_NOT_FOUND = 2;
    ERROR_USER_ALREADY_EXISTS = 3;
    ERROR_TOKEN_EXPIRED = 4;
    ERROR_PERMISSION_DENIED = 5;
}

message Error {
    ErrorCode code = 1;
    string message = 2;
}

message CheckAdminRequest {
    int64 user_id = 1;
}

message CheckAdminResponse {
    bool is_admin = 1;
}
