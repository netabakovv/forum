// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/forum_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/netabakovv/forum/back/proto"
	grpc "google.golang.org/grpc"
)

// MockAuthServiceClient is a mock of AuthServiceClient interface.
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient.
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance.
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// CheckAdminStatus mocks base method.
func (m *MockAuthServiceClient) CheckAdminStatus(ctx context.Context, in *proto.CheckAdminRequest, opts ...grpc.CallOption) (*proto.CheckAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckAdminStatus", varargs...)
	ret0, _ := ret[0].(*proto.CheckAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAdminStatus indicates an expected call of CheckAdminStatus.
func (mr *MockAuthServiceClientMockRecorder) CheckAdminStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAdminStatus", reflect.TypeOf((*MockAuthServiceClient)(nil).CheckAdminStatus), varargs...)
}

// GetUserByID mocks base method.
func (m *MockAuthServiceClient) GetUserByID(ctx context.Context, in *proto.GetUserRequest, opts ...grpc.CallOption) (*proto.UserProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByID", varargs...)
	ret0, _ := ret[0].(*proto.UserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthServiceClientMockRecorder) GetUserByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthServiceClient)(nil).GetUserByID), varargs...)
}

// Login mocks base method.
func (m *MockAuthServiceClient) Login(ctx context.Context, in *proto.LoginRequest, opts ...grpc.CallOption) (*proto.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*proto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceClient)(nil).Login), varargs...)
}

// Logout mocks base method.
func (m *MockAuthServiceClient) Logout(ctx context.Context, in *proto.LogoutRequest, opts ...grpc.CallOption) (*proto.LogoutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Logout", varargs...)
	ret0, _ := ret[0].(*proto.LogoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthServiceClientMockRecorder) Logout(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthServiceClient)(nil).Logout), varargs...)
}

// RefreshToken mocks base method.
func (m *MockAuthServiceClient) RefreshToken(ctx context.Context, in *proto.RefreshTokenRequest, opts ...grpc.CallOption) (*proto.RefreshTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RefreshToken", varargs...)
	ret0, _ := ret[0].(*proto.RefreshTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthServiceClientMockRecorder) RefreshToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthServiceClient)(nil).RefreshToken), varargs...)
}

// Register mocks base method.
func (m *MockAuthServiceClient) Register(ctx context.Context, in *proto.RegisterRequest, opts ...grpc.CallOption) (*proto.RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*proto.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthServiceClient)(nil).Register), varargs...)
}

// ValidateToken mocks base method.
func (m *MockAuthServiceClient) ValidateToken(ctx context.Context, in *proto.ValidateRequest, opts ...grpc.CallOption) (*proto.ValidateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateToken", varargs...)
	ret0, _ := ret[0].(*proto.ValidateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthServiceClientMockRecorder) ValidateToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthServiceClient)(nil).ValidateToken), varargs...)
}

// MockAuthServiceServer is a mock of AuthServiceServer interface.
type MockAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceServerMockRecorder
}

// MockAuthServiceServerMockRecorder is the mock recorder for MockAuthServiceServer.
type MockAuthServiceServerMockRecorder struct {
	mock *MockAuthServiceServer
}

// NewMockAuthServiceServer creates a new mock instance.
func NewMockAuthServiceServer(ctrl *gomock.Controller) *MockAuthServiceServer {
	mock := &MockAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceServer) EXPECT() *MockAuthServiceServerMockRecorder {
	return m.recorder
}

// CheckAdminStatus mocks base method.
func (m *MockAuthServiceServer) CheckAdminStatus(arg0 context.Context, arg1 *proto.CheckAdminRequest) (*proto.CheckAdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAdminStatus", arg0, arg1)
	ret0, _ := ret[0].(*proto.CheckAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAdminStatus indicates an expected call of CheckAdminStatus.
func (mr *MockAuthServiceServerMockRecorder) CheckAdminStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAdminStatus", reflect.TypeOf((*MockAuthServiceServer)(nil).CheckAdminStatus), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockAuthServiceServer) GetUserByID(arg0 context.Context, arg1 *proto.GetUserRequest) (*proto.UserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*proto.UserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthServiceServerMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthServiceServer)(nil).GetUserByID), arg0, arg1)
}

// Login mocks base method.
func (m *MockAuthServiceServer) Login(arg0 context.Context, arg1 *proto.LoginRequest) (*proto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*proto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceServer)(nil).Login), arg0, arg1)
}

// Logout mocks base method.
func (m *MockAuthServiceServer) Logout(arg0 context.Context, arg1 *proto.LogoutRequest) (*proto.LogoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(*proto.LogoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthServiceServerMockRecorder) Logout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthServiceServer)(nil).Logout), arg0, arg1)
}

// RefreshToken mocks base method.
func (m *MockAuthServiceServer) RefreshToken(arg0 context.Context, arg1 *proto.RefreshTokenRequest) (*proto.RefreshTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0, arg1)
	ret0, _ := ret[0].(*proto.RefreshTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthServiceServerMockRecorder) RefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthServiceServer)(nil).RefreshToken), arg0, arg1)
}

// Register mocks base method.
func (m *MockAuthServiceServer) Register(arg0 context.Context, arg1 *proto.RegisterRequest) (*proto.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*proto.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthServiceServer)(nil).Register), arg0, arg1)
}

// ValidateToken mocks base method.
func (m *MockAuthServiceServer) ValidateToken(arg0 context.Context, arg1 *proto.ValidateRequest) (*proto.ValidateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", arg0, arg1)
	ret0, _ := ret[0].(*proto.ValidateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthServiceServerMockRecorder) ValidateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthServiceServer)(nil).ValidateToken), arg0, arg1)
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockAuthServiceServerMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockAuthServiceServer)(nil).mustEmbedUnimplementedAuthServiceServer))
}

// MockUnsafeAuthServiceServer is a mock of UnsafeAuthServiceServer interface.
type MockUnsafeAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthServiceServerMockRecorder
}

// MockUnsafeAuthServiceServerMockRecorder is the mock recorder for MockUnsafeAuthServiceServer.
type MockUnsafeAuthServiceServerMockRecorder struct {
	mock *MockUnsafeAuthServiceServer
}

// NewMockUnsafeAuthServiceServer creates a new mock instance.
func NewMockUnsafeAuthServiceServer(ctrl *gomock.Controller) *MockUnsafeAuthServiceServer {
	mock := &MockUnsafeAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthServiceServer) EXPECT() *MockUnsafeAuthServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockUnsafeAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockUnsafeAuthServiceServerMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockUnsafeAuthServiceServer)(nil).mustEmbedUnimplementedAuthServiceServer))
}

// MockForumServiceClient is a mock of ForumServiceClient interface.
type MockForumServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockForumServiceClientMockRecorder
}

// MockForumServiceClientMockRecorder is the mock recorder for MockForumServiceClient.
type MockForumServiceClientMockRecorder struct {
	mock *MockForumServiceClient
}

// NewMockForumServiceClient creates a new mock instance.
func NewMockForumServiceClient(ctrl *gomock.Controller) *MockForumServiceClient {
	mock := &MockForumServiceClient{ctrl: ctrl}
	mock.recorder = &MockForumServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForumServiceClient) EXPECT() *MockForumServiceClientMockRecorder {
	return m.recorder
}

// Comments mocks base method.
func (m *MockForumServiceClient) Comments(ctx context.Context, in *proto.ListCommentsRequest, opts ...grpc.CallOption) (*proto.ListCommentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Comments", varargs...)
	ret0, _ := ret[0].(*proto.ListCommentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Comments indicates an expected call of Comments.
func (mr *MockForumServiceClientMockRecorder) Comments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Comments", reflect.TypeOf((*MockForumServiceClient)(nil).Comments), varargs...)
}

// CreateComment mocks base method.
func (m *MockForumServiceClient) CreateComment(ctx context.Context, in *proto.CreateCommentRequest, opts ...grpc.CallOption) (*proto.CommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateComment", varargs...)
	ret0, _ := ret[0].(*proto.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockForumServiceClientMockRecorder) CreateComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockForumServiceClient)(nil).CreateComment), varargs...)
}

// CreatePost mocks base method.
func (m *MockForumServiceClient) CreatePost(ctx context.Context, in *proto.CreatePostRequest, opts ...grpc.CallOption) (*proto.PostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePost", varargs...)
	ret0, _ := ret[0].(*proto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockForumServiceClientMockRecorder) CreatePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockForumServiceClient)(nil).CreatePost), varargs...)
}

// DeleteComment mocks base method.
func (m *MockForumServiceClient) DeleteComment(ctx context.Context, in *proto.DeleteCommentRequest, opts ...grpc.CallOption) (*proto.EmptyMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteComment", varargs...)
	ret0, _ := ret[0].(*proto.EmptyMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockForumServiceClientMockRecorder) DeleteComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockForumServiceClient)(nil).DeleteComment), varargs...)
}

// DeletePost mocks base method.
func (m *MockForumServiceClient) DeletePost(ctx context.Context, in *proto.DeletePostRequest, opts ...grpc.CallOption) (*proto.EmptyMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePost", varargs...)
	ret0, _ := ret[0].(*proto.EmptyMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockForumServiceClientMockRecorder) DeletePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockForumServiceClient)(nil).DeletePost), varargs...)
}

// GetByPostID mocks base method.
func (m *MockForumServiceClient) GetByPostID(ctx context.Context, in *proto.GetCommentsByPostIDRequest, opts ...grpc.CallOption) (*proto.ListCommentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByPostID", varargs...)
	ret0, _ := ret[0].(*proto.ListCommentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPostID indicates an expected call of GetByPostID.
func (mr *MockForumServiceClientMockRecorder) GetByPostID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPostID", reflect.TypeOf((*MockForumServiceClient)(nil).GetByPostID), varargs...)
}

// GetCommentByID mocks base method.
func (m *MockForumServiceClient) GetCommentByID(ctx context.Context, in *proto.GetCommentRequest, opts ...grpc.CallOption) (*proto.CommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentByID", varargs...)
	ret0, _ := ret[0].(*proto.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockForumServiceClientMockRecorder) GetCommentByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockForumServiceClient)(nil).GetCommentByID), varargs...)
}

// GetMessages mocks base method.
func (m *MockForumServiceClient) GetMessages(ctx context.Context, in *proto.GetMessagesRequest, opts ...grpc.CallOption) (*proto.GetMessagesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessages", varargs...)
	ret0, _ := ret[0].(*proto.GetMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockForumServiceClientMockRecorder) GetMessages(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockForumServiceClient)(nil).GetMessages), varargs...)
}

// GetPost mocks base method.
func (m *MockForumServiceClient) GetPost(ctx context.Context, in *proto.GetPostRequest, opts ...grpc.CallOption) (*proto.PostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPost", varargs...)
	ret0, _ := ret[0].(*proto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockForumServiceClientMockRecorder) GetPost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockForumServiceClient)(nil).GetPost), varargs...)
}

// Posts mocks base method.
func (m *MockForumServiceClient) Posts(ctx context.Context, in *proto.ListPostsRequest, opts ...grpc.CallOption) (*proto.ListPostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Posts", varargs...)
	ret0, _ := ret[0].(*proto.ListPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Posts indicates an expected call of Posts.
func (mr *MockForumServiceClientMockRecorder) Posts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Posts", reflect.TypeOf((*MockForumServiceClient)(nil).Posts), varargs...)
}

// SendMessage mocks base method.
func (m *MockForumServiceClient) SendMessage(ctx context.Context, in *proto.ChatMessage, opts ...grpc.CallOption) (*proto.EmptyMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessage", varargs...)
	ret0, _ := ret[0].(*proto.EmptyMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockForumServiceClientMockRecorder) SendMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockForumServiceClient)(nil).SendMessage), varargs...)
}

// UpdateComment mocks base method.
func (m *MockForumServiceClient) UpdateComment(ctx context.Context, in *proto.UpdateCommentRequest, opts ...grpc.CallOption) (*proto.CommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateComment", varargs...)
	ret0, _ := ret[0].(*proto.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockForumServiceClientMockRecorder) UpdateComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockForumServiceClient)(nil).UpdateComment), varargs...)
}

// UpdatePost mocks base method.
func (m *MockForumServiceClient) UpdatePost(ctx context.Context, in *proto.UpdatePostRequest, opts ...grpc.CallOption) (*proto.PostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePost", varargs...)
	ret0, _ := ret[0].(*proto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockForumServiceClientMockRecorder) UpdatePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockForumServiceClient)(nil).UpdatePost), varargs...)
}

// MockForumServiceServer is a mock of ForumServiceServer interface.
type MockForumServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockForumServiceServerMockRecorder
}

// MockForumServiceServerMockRecorder is the mock recorder for MockForumServiceServer.
type MockForumServiceServerMockRecorder struct {
	mock *MockForumServiceServer
}

// NewMockForumServiceServer creates a new mock instance.
func NewMockForumServiceServer(ctrl *gomock.Controller) *MockForumServiceServer {
	mock := &MockForumServiceServer{ctrl: ctrl}
	mock.recorder = &MockForumServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForumServiceServer) EXPECT() *MockForumServiceServerMockRecorder {
	return m.recorder
}

// Comments mocks base method.
func (m *MockForumServiceServer) Comments(arg0 context.Context, arg1 *proto.ListCommentsRequest) (*proto.ListCommentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Comments", arg0, arg1)
	ret0, _ := ret[0].(*proto.ListCommentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Comments indicates an expected call of Comments.
func (mr *MockForumServiceServerMockRecorder) Comments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Comments", reflect.TypeOf((*MockForumServiceServer)(nil).Comments), arg0, arg1)
}

// CreateComment mocks base method.
func (m *MockForumServiceServer) CreateComment(arg0 context.Context, arg1 *proto.CreateCommentRequest) (*proto.CommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockForumServiceServerMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockForumServiceServer)(nil).CreateComment), arg0, arg1)
}

// CreatePost mocks base method.
func (m *MockForumServiceServer) CreatePost(arg0 context.Context, arg1 *proto.CreatePostRequest) (*proto.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(*proto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockForumServiceServerMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockForumServiceServer)(nil).CreatePost), arg0, arg1)
}

// DeleteComment mocks base method.
func (m *MockForumServiceServer) DeleteComment(arg0 context.Context, arg1 *proto.DeleteCommentRequest) (*proto.EmptyMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.EmptyMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockForumServiceServerMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockForumServiceServer)(nil).DeleteComment), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockForumServiceServer) DeletePost(arg0 context.Context, arg1 *proto.DeletePostRequest) (*proto.EmptyMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(*proto.EmptyMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockForumServiceServerMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockForumServiceServer)(nil).DeletePost), arg0, arg1)
}

// GetByPostID mocks base method.
func (m *MockForumServiceServer) GetByPostID(arg0 context.Context, arg1 *proto.GetCommentsByPostIDRequest) (*proto.ListCommentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPostID", arg0, arg1)
	ret0, _ := ret[0].(*proto.ListCommentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPostID indicates an expected call of GetByPostID.
func (mr *MockForumServiceServerMockRecorder) GetByPostID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPostID", reflect.TypeOf((*MockForumServiceServer)(nil).GetByPostID), arg0, arg1)
}

// GetCommentByID mocks base method.
func (m *MockForumServiceServer) GetCommentByID(arg0 context.Context, arg1 *proto.GetCommentRequest) (*proto.CommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", arg0, arg1)
	ret0, _ := ret[0].(*proto.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockForumServiceServerMockRecorder) GetCommentByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockForumServiceServer)(nil).GetCommentByID), arg0, arg1)
}

// GetMessages mocks base method.
func (m *MockForumServiceServer) GetMessages(arg0 context.Context, arg1 *proto.GetMessagesRequest) (*proto.GetMessagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockForumServiceServerMockRecorder) GetMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockForumServiceServer)(nil).GetMessages), arg0, arg1)
}

// GetPost mocks base method.
func (m *MockForumServiceServer) GetPost(arg0 context.Context, arg1 *proto.GetPostRequest) (*proto.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(*proto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockForumServiceServerMockRecorder) GetPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockForumServiceServer)(nil).GetPost), arg0, arg1)
}

// Posts mocks base method.
func (m *MockForumServiceServer) Posts(arg0 context.Context, arg1 *proto.ListPostsRequest) (*proto.ListPostsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Posts", arg0, arg1)
	ret0, _ := ret[0].(*proto.ListPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Posts indicates an expected call of Posts.
func (mr *MockForumServiceServerMockRecorder) Posts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Posts", reflect.TypeOf((*MockForumServiceServer)(nil).Posts), arg0, arg1)
}

// SendMessage mocks base method.
func (m *MockForumServiceServer) SendMessage(arg0 context.Context, arg1 *proto.ChatMessage) (*proto.EmptyMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(*proto.EmptyMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockForumServiceServerMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockForumServiceServer)(nil).SendMessage), arg0, arg1)
}

// UpdateComment mocks base method.
func (m *MockForumServiceServer) UpdateComment(arg0 context.Context, arg1 *proto.UpdateCommentRequest) (*proto.CommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.CommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockForumServiceServerMockRecorder) UpdateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockForumServiceServer)(nil).UpdateComment), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockForumServiceServer) UpdatePost(arg0 context.Context, arg1 *proto.UpdatePostRequest) (*proto.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(*proto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockForumServiceServerMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockForumServiceServer)(nil).UpdatePost), arg0, arg1)
}

// mustEmbedUnimplementedForumServiceServer mocks base method.
func (m *MockForumServiceServer) mustEmbedUnimplementedForumServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedForumServiceServer")
}

// mustEmbedUnimplementedForumServiceServer indicates an expected call of mustEmbedUnimplementedForumServiceServer.
func (mr *MockForumServiceServerMockRecorder) mustEmbedUnimplementedForumServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedForumServiceServer", reflect.TypeOf((*MockForumServiceServer)(nil).mustEmbedUnimplementedForumServiceServer))
}

// MockUnsafeForumServiceServer is a mock of UnsafeForumServiceServer interface.
type MockUnsafeForumServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeForumServiceServerMockRecorder
}

// MockUnsafeForumServiceServerMockRecorder is the mock recorder for MockUnsafeForumServiceServer.
type MockUnsafeForumServiceServerMockRecorder struct {
	mock *MockUnsafeForumServiceServer
}

// NewMockUnsafeForumServiceServer creates a new mock instance.
func NewMockUnsafeForumServiceServer(ctrl *gomock.Controller) *MockUnsafeForumServiceServer {
	mock := &MockUnsafeForumServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeForumServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeForumServiceServer) EXPECT() *MockUnsafeForumServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedForumServiceServer mocks base method.
func (m *MockUnsafeForumServiceServer) mustEmbedUnimplementedForumServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedForumServiceServer")
}

// mustEmbedUnimplementedForumServiceServer indicates an expected call of mustEmbedUnimplementedForumServiceServer.
func (mr *MockUnsafeForumServiceServerMockRecorder) mustEmbedUnimplementedForumServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedForumServiceServer", reflect.TypeOf((*MockUnsafeForumServiceServer)(nil).mustEmbedUnimplementedForumServiceServer))
}
